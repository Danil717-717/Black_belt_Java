Stream - поток
Stream - это последовательность элементов,поддерживающих
последовательные и параллельные операции над ними

Методы stream не меняют саму коллекцию или
массив, от которой был создан stream

  stream после обработки нельзя использовать!!!!

(i) - intermediate methods        (t) - terminal method

(i)  .map() - берет каждый элемент по очереди
             из нашего stream и сопоставляет ему элемент,
             который получается после применения на нем,
             тех действий, которые мы прописываем в нем
             с помощью lambda выражения

(i)  .filter()  - фильтрует данные из определенного
                  набора

(t)  .forEach() - void, по этому после него не
                  получится создать коллекцию

(t)  .reduce()  - (уменьшить) уменьшаем н-ое кол-во
                  элементов, на выходе всегда получаем
                  один элемент

(i)  .sorted()  - сортирует

 метод chaining в stream - вызов цепочкой методов
 друг за другом
     Source(например коллекции, массив) ->
     intermediate methods(lazy - ленивый)         ->
     Terminal method(eager - действующий сразу)
      - промежуточные методы(lazy) не работают пока
        не вызовется терминальный(eagor: конечный) метод
        например .forEach() - вывод, или .reduce()
        или .collect(Collectors.toList())
        они void

()   .concat()   - конкатенирует стремы

(i)  .distinct() - возвращает stream уникальных
                   элементов

(t)  .count()    - считает кол-во элементов в stream,
                   возвращает long

(i)  .peek()     - как и forEach принимает в параметр
                   Consumer<T>, но возвращает stream
                   и позволяет на разных этапах
                   просмотреть состояние stream

(i)  .flatMap()  - схож с методом .map(), но позволяет
                   работать не с элементами коллекции,
                   а с элементами элементов коллекции

(t)  .collect()  - преобразовываем stream в List или
                   в другую коллекцию. У него есть
                   класс Collectors, у этого класса
                   есть два метода:
                   groupingBy (группировка по)
                   partitioningBy (разделение по)

(t) .findFirst() - возвращает первый элемент stream

(t)  .min()      - возвращает минимальное значение stream

(t)  .max()      - возвращает минимальное значение stream

(i)  .limit()    - возвращает stream, ограничивает кол-во
                   элементов в нашем stream

(i)  .skip()     - ограничивает кол-во элементов в нашем
                   stream, так же как и limit, но не
                   первые N элементов, а будет пропускать
                   первые N элементов

(i)  .mapToInt   - возвращает Int stream, применяется с
                   методом .box(),он конвертирует.
                   Так же есть mapToDouble и mapToLong.
                   Есть методы: sum, average, min, max


Parallel stream - это возможность использования нескольких
                  ядер процессора при выполнении каких-либо
                  операций со stream. Используется когда
                  очень много элементов, или можно наоборот
                  потерять в скорости. Может привести к
                  некорректным вычислениям. Можно сделать на
                  уже имеющемся листе или создать с нуля
                  list.parallelStream(). ...

                  Stream<T> s = Stream.of(...);
                        s.parallel(). ...