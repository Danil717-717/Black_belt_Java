 Многопоточность - принцип построения программы,
            при котором несколько блоков кода
            могут выполняться одновременно

 Основные цели: 1) Производительность
                2) Concurrency(выполнение сразу
                   нескольких задач)

 технология context switch

 Варианты создания нового потока:

 //Создание
 class MyThread extends Thread{
        public void run() {
            ...код...
        }
 }
 //Запуск
 new MyThread().start();

 //Создание
 class MyRunnableImpl implements Runnable{
        public void run() {
            ...код...
        }
 }

 //Запуск
 new Tread( new MyRunnableImpl()).start();

 Из-за того, что в Java отсутствует множественное
 наследование, чаще используют 2-ой вариант.


Методы:
.setName()     - имя потока назначить default name Thread-N
.getName()     - имя потока получить
.setPriority() - приоритетность default priority 5(от 1 до 10)
.getPriority() - приоритет. (нет гарантий что 10 будет главнее)
                 MIN_PRIORITY  = 1   Thread.MIN_PRIORITY
                 NORM_PRIORITY = 5   Thread.NORM_PRIORITY
                 MAX_PRIORITY  = 10  Thread.MAX_PRIORITY
.sleep()       - усыпить поток
.join()        - некая очередность

.currentThread() - показывает текущий поток

Состояние потока: NEW, RUNNABLE, TERMINATED


           Concurrency / Parallelism
          Asynchronous / Synchronous

    Concurrency(совпадение, согласованность, например:
петь и кушать - одновременно можно только либо петь,
либо кушать)(concurrent - параллельный, например:
готовить и говорить по телефону, можно одновременно)
- означает выполнение сразу нескольких задач. В
зависимости от процессора компьютера concurrency
может достигаться разными способами.
    Parallelism означает выполнение 2-х и более задач
в одно и то же время, те параллельно. В компьютерах
с многоядерным процессором concurrency может
достигаться за счет parallelism.
    В синхронном программировании задачи выполняются
последовательно друг за другом.
    В асинхронном программировании каждая следующая
задача НЕ ждет окончания выполнения предыдущей.
Асинхронное программирование помогает достичь
concurrency.


                   volatile
    Ключевое слово volatile(изменчивый, непостоянный)
используется для пометки переменной, как хранящейся
только в основной памяти "main memory".
     Для синхронизации значения переменной между
потоками ключевое слово volatile используется тогда,
когда только один поток может изменять значение этой
переменной, а остальные потоки могут его только читать.


         Data race и synchronized методы
    Data race - это проблема, которая может возникнуть
когда 2 и более потоков обращаются к одной и той же
переменной и как минимум 1 поток ее изменяет.
    Пример:
    public synchronized void abc(){
        method body
    }

           "Монитор" и synchronized блоки
Монитор - это сущность/механизм, благодаря которому
достигается корректная работа при синхронизации.
В Java у каждого класса и объекта есть привязанный
к нему монитор. Может быть свободен/занят.
Любая блокировка происходит на объекте или на классе.
В synchronized методах.
    Пример:
    static final Object lock = new Object();
    public void abc(){
        method body
        synchronized(lock){
            block body
        }
        method body
    }

    Не возможно синхронизировать конструктор, его
можно обработать только одним потоком

             Методы wait и notify
    Для извещения потоком других потоков о своих
действиях часто используются следующие методы:
    wait - освобождает монитор и переводит вызывающий
поток в состояния ожидания до тех пор, пока другой
поток не вызовет метод notify();
    notify - НЕ освобождает монитор и будит поток,
у которого ранее был вызван метод wait();
    notifyAll() - Не освобождает монитор и будит
все потоки, у которых ранее был вызван метод wait();

              Возможные ситуации в
         многопоточном программировании
    DeadLock - ситуация, когда 2 или более потоков
золочены навсегда, ожидают друг друга и ничего не делают.
    LiveLock - ситуация, когда 2 или более потоков
золочены навсегда, ожидают друг друга, проделывают
какую то работу, но без какого-либо прогресса.
    Lock starvation - ситуация, когда менее приоритетные
потоки ждут долгое время или все время для того,
чтобы могли запуститься.

              Lock и ReentrantLock
    Lock - интерфейс, который имплементируется классом
ReentrantLock.
    Так же как ключевое слово synchronized, Lock
нужен для достижения синхронизации между потоками.
 .lock()    - активация Lock, после этого метода
              кодом после Lock может воспользоваться
              только один поток в одно и тоже время
 .unlock()  - снимает замок после кода с объекта,
              всегда в блоке finally
 .tryLock() - попытайся сделать lock, он позволяет
              делать lock когда ресурс свободен
              или если ресурс занят не ждать когда
              он освободиться и делать что-то другое


              Daemon потоки
    Daemon потоки предназначены для выполнения фоновых
задач и оказания различных сервисов User потокам.
    При завершении работы последнего User потока,
программа завершает свое выполнение, не дожидаясь
окончания работы Daemon потоков.
 .setDaemon() - назначение потока, нужно вызывать после
                того как он был создан и обязательно
                перед тем как будет запущен. Передать
                значение true - тем самым мы определяем
                его daemon потоком
 .isDaemon()  - проверка потока является ли он daemon
                потоком


              Прерывание потоков
    У нас есть возможность послать сигнал потоку, что
мы хотим его прервать.
    У нас так же есть возможность в самом потоке
проверить, хотят ли его прервать.
Что делать, если данная проверка показала, что поток
хотят прервать, должен решать сам программист.
 .interrupt()     -
 .isinterrupted() -


           Thread pool и ExecutorService
    Thread pool - это множество потоков, каждый из
которых предназначен для выполнения той или иной задачи.
    В Java с thread pool-ами удобнее всего работать
посредством ExecutorService.
    Thread pool удобнее всего создавать, используя
factory методы класса ExecutorService:
  Executors.newFixedThreadPool(int count) - создаст
                               pool с 5-ю потоками.
  Executors.newSingleThreadExecutor() - создаст pool
                               с одним потоком
    После выполнения необходимых операций нужно вызвать
метод executorService.shutdown(); - завершит выполнение
    Метод execute передает наше задание(task) в thread
pool, где оно выполняется одним из потоков.
    После выполнения метода shutdown ExecutorService
понимает, что новых заданий больше не будет и, выполнив
поступившие до этого задания, прекращает работу.
    Метод awaitTermination принуждает поток в котором
он вызвался подождать до тех пор, пока не выполнится
одно из двух событий: либо ExecutorService прекратит
свою работу, либо пройдет время, указанное в параметре
метода awaitTerminator.

              ScheduledExecutorService
    ScheduledExecutorService мы используем тогда, когда
хотим установить расписание на запуск потока из пула.
Данный pool создается, используя factory метод класса
Executors:
Executors.newScheduledThreadPool(int count)
 .schedule - расписание
 .scheduleAtFixedRate - выполняет операции через
                    заданный период времени, время
                    между началом выполнения таска
                    и начала выполнения второго таска
                    начало-начало
 .scheduleWithFixedDelay - выполняет операции через
                 заданный период времени, только
                 будет разрыв между окончанием
                 выполнения таска и начала следующего
                 конец-начало

             Интерфейсы Callable и Future
    Callable, так же как и Runnable, представляет собой
определенное задание, которое выполняется потоком.
В отличии от Runnable Callable:
    * имеет return type не void;
    * может выбрасывать Exception
    Метод submit передает наше задание (task) в thread
pool, для выполнения его одним из потоков и возвращает
тип Future, в котором и храниться результат выполнения
нашего задания.
    Метод get позволяет получать результат выполнения
нашего задания из объекта Future.
    .isDone() - показывает закончился ли наш таск

               Semaphore
    Semaphore- это синхронизатор, позволяющий ограничить
доступ к какому-то ресурсу. В конструктор Semaphore
нужно передавать кол-во потоков, которым Semaphore будет
разрешать одновременно использовать этот ресурс.
    .acquire() - преднозначен для попытки получить
                 разрешение от семофора, он будет
                 заблокирован, пока не получим разрешения
                 каунтер симафора уменьшается на 1
    .release() - мы освобождаем разрешение семофора, тем
                 самым, увеличиваем каунтер на 1, всегда
                 в finally


               CountDownLatch
          (замок с обратным отсчетом)
    CountDownLatch - это синхронизатор, позволяющий
любому кол-ву потоков ждать пока не завершиться
определенное кол-во операций.В конструктор CountDown
Latch нужно передавать кол-во операций, которые
должны завершиться, чтобы потоки продолжили свою работу.
    .await() - проверяет счетчик, если он больше 0, то
               потоки заблокированы, если =0, тогда
               поток работает
    .countDown() - уменьшаем счетчик на еденицу
    .getCount() - выводит значение счетчика


                Exchanger
    Exchanger - это синхронизатор, позволяющий
обмениваться данными между двумя потоками, обеспечивает
то, что оба потока получат информацию друг друга
одновременно.
    .exchange() - для обмена


                AtomicInteger
    AtomicInteger - это класс, который предоставляет
возможность работать с целочисленным значением int,
используя атомарные операции.
     .incrementAndGet() - увеличиваем значение и выводим
     .getAndIncrement() - сначала получаем значение
                          увеличиваем
     .addAndGet()       - увелич на .. и верни
     .getAndAdd()       - вывод старого значения потом
                          меняет на ..
     .decrementAndGet() - уменьши на еденицу и верни
     getAndDecrement()  - верни старое значение и
                          уменьши на еденицу
     .counter.addAndGet(-5) - уменьши на 5


       Коллекции для работы с многопоточностью
     Synchronized collection - получаются из традиционных
коллекций благодаря их обертыванию
    Concurrent collections - Изначально созданы для
работы с многопоточностью, скорость выше
    Collections.synchronizedXYZ(коллекция)


               ConcurrentHashMap
    ConcurrentHashMap - импплементирует интерфейс
ConcurrentMap, который в свою очередь происходит от
интерфейса Map.
    В ConcurrentHashMap любое кол-во потоков может
читать элементы не блокируя его.
    В ConcurrentHashMap, благодаря его сегментированию,
при изменении какого-либо элемента блокируется только
bucket, в котором он находится. Остальные bucket в
доступе для других потоков.
    В ConcurrentHashMap ни key, ни value не могут быть
null.


              CopyOnWriteArrayList
    CopyOnWriteArrayList имплементирует интерфейс List.
    CopyOnWriteArrayList следует использовать тогда,
когда вам нужно добиться потокобезопасности, у вас
небольшое кол-во операций по изменению элементов и
большое кол-во по их чтению.
    В CopyOnWriteArrayList при каждой операции по
изменению элементов создается копия этого листа.


            ArrayBlockingQueue
    ArrayBlockingQueue - потокобезопасная очередь с
ограниченным размером(capacity restricted).
    Обычно один или несколько потоков добавляют
элементы в конец очереди, а другой или другие потоки
забирают элементы из начала очереди.
    .put()  -
    .take() -








