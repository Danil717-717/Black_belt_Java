 Многопоточность - принцип построения программы,
            при котором несколько блоков кода
            могут выполняться одновременно

 Основные цели: 1) Производительность
                2) Concurrency(выполнение сразу
                   нескольких задач)

 технология context switch

 Варианты создания нового потока:

 //Создание
 class MyThread extends Thread{
        public void run() {
            ...код...
        }
 }
 //Запуск
 new MyThread().start();

 //Создание
 class MyRunnableImpl implements Runnable{
        public void run() {
            ...код...
        }
 }

 //Запуск
 new Tread( new MyRunnableImpl()).start();

 Из-за того, что в Java отсутствует множественное
 наследование, чаще используют 2-ой вариант.


Методы:
.setName()     - имя потока назначить default name Thread-N
.getName()     - имя потока получить
.setPriority() - приоритетность default priority 5(от 1 до 10)
.getPriority() - приоритет. (нет гарантий что 10 будет главнее)
                 MIN_PRIORITY  = 1   Thread.MIN_PRIORITY
                 NORM_PRIORITY = 5   Thread.NORM_PRIORITY
                 MAX_PRIORITY  = 10  Thread.MAX_PRIORITY
.sleep()       - усыпить поток
.join()        - некая очередность

.currentThread() - показывает текущий поток

Состояние потока: NEW, RUNNABLE, TERMINATED


           Concurrency / Parallelism
          Asynchronous / Synchronous

    Concurrency(совпадение, согласованность, например:
петь и кушать - одновременно можно только либо петь,
либо кушать)(concurrent - параллельный, например:
готовить и говорить по телефону, можно одновременно)
- означает выполнение сразу нескольких задач. В
зависимости от процессора компьютера concurrency
может достигаться разными способами.
    Parallelism означает выполнение 2-х и более задач
в одно и то же время, те параллельно. В компьютерах
с многоядерным процессором concurrency может
достигаться за счет parallelism.
    В синхронном программировании задачи выполняются
последовательно друг за другом.
    В асинхронном программировании каждая следующая
задача НЕ ждет окончания выполнения предыдущей.
Асинхронное программирование помогает достичь
concurrency.


                   volatile
    Ключевое слово volatile(изменчивый, непостоянный)
используется для пометки переменной, как хранящейся
только в основной памяти "main memory".
     Для синхронизации значения переменной между
потоками ключевое слово volatile используется тогда,
когда только один поток может изменять значение этой
переменной, а остальные потоки могут его только читать.


         Data race и synchronized методы
    Data race - это проблема, которая может возникнуть
когда 2 и более потоков обращаются к одной и той же
переменной и как минимум 1 поток ее изменяет.
    Пример:
    public synchronixed void abc(){
        method body
    }






